{"version":3,"sources":["texts.js","components/Header.js","api/index.js","components/Loaders.js","components/Search.js","components/TabContent.js","components/Trains.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","texts","handleErrors","response","ok","Error","statusText","FetchData","url","window","navigator","onLine","fetch","then","json","GetCurrentStation","code","BigLoader","Search","state","searchText","stations","newStationsCodes","error","loading","handleSearch","e","preventDefault","setState","target","value","charAt","toUpperCase","slice","stationsCodes","length","i","station","includes","push","selectStation","a","stationCode","find","item","trains","props","result","console","log","message","map","stationName","stationShortCode","this","onSubmit","onFocus","select","type","list","name","onChange","id","index","key","Component","TabContent","cancelledStyle","backgroundColor","color","Table","borderless","responsive","titleOne","titleTwo","titleThree","titleFour","undefined","style","cancelled","trainType","trainNumber","departureStation","terminal","lateTime","scheduledTime","Trains","convertDate","newTrains","time","Date","Math","floor","getTime","actualTime","getHours","getMinutes","scheduleTime","times","newObject","Object","assign","getTrains","convert","departureStationShortCode","terminalShortCode","arrivalTrains","departureTrains","j","timeTableRows","arrival","departure","sort","b","Tabs","Tab","eventKey","title","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.00711787.chunk.js","sourcesContent":["export default \r\n{\r\n    \"header-text\": \"Schedule of train stations\",\r\n    \"search-label-text\": \"Search with station name\",\r\n    \"empty-trainarray\": \"No trains found\",\r\n    \"no-internet\": \"No internet connection\",\r\n}","import React from \"react\";\r\nimport texts from \"../texts\";\r\n\r\nexport const Header = () => <p className=\"Header\">{texts[\"header-text\"]}</p>;\r\n\r\n","import texts from \"../texts\";\r\n\r\nfunction handleErrors(response) {\r\n  if (!response.ok) {\r\n    throw Error(response.statusText);\r\n  }\r\n  return response;\r\n}\r\n\r\nfunction FetchData(url) {\r\n  if (window.navigator.onLine === false) {\r\n    const error = texts[\"no-internet\"];\r\n    throw new Error(error);\r\n  } else {\r\n      return fetch(url)\r\n        .then(handleErrors)\r\n        .then((response) => response.json())\r\n  }\r\n}\r\n\r\nexport function GetStationCodes() {\r\n    const url = \"https://rata.digitraffic.fi/api/v1/metadata/stations\";\r\n   return FetchData(url);\r\n}\r\n\r\nexport function GetCurrentStation(code) {\r\n    let url = `https://rata.digitraffic.fi/api/v1/live-trains/station/${code}?minutes_before_departure=30&minutes_after_departure=15&minutes_before_arrival=30&minutes_after_arrival=15`;\r\n    return FetchData(url);\r\n}\r\n","import React from 'react';\r\n\r\nexport const SmallLoader = () => (\r\n    <div className=\"Small-loader\"></div>\r\n);\r\n\r\nexport const BigLoader = () => (\r\n    <div className=\"Big-loader\"></div>\r\n);","import React from \"react\";\r\nimport { Component } from \"react\";\r\n\r\nimport { GetStationCodes, GetCurrentStation } from \"../api/index\";\r\n\r\nimport texts from \"../texts\";\r\n\r\nimport { BigLoader } from \"./Loaders\";\r\n\r\nclass Search extends Component {\r\n  state = {\r\n    searchText: \"\",\r\n    stations: [],\r\n    newStationsCodes: [],\r\n    error: \"\",\r\n    loading: false,\r\n  };\r\n\r\n  // Fetch all stationscodes from API\r\n  async componentDidMount() {\r\n    try {\r\n      let stationsCodes = await GetStationCodes();\r\n\r\n      let newStationsCodes = stationsCodes.map((item) => ({\r\n        station: item.stationName,\r\n        code: item.stationShortCode,\r\n      }));\r\n      this.setState({ newStationsCodes });\r\n    } catch (error) {\r\n      this.setState({ error: error.message });\r\n    }\r\n  }\r\n\r\n  // Get value from input, change first letter to upperCase and check if input value match with stations\r\n  // Set all match to stations array\r\n  handleSearch = (e) => {\r\n    e.preventDefault();\r\n    this.setState({ error: \"\" });\r\n    let stations = [];\r\n    let searchText =\r\n      e.target.value.charAt(0).toUpperCase() + e.target.value.slice(1);\r\n    this.setState({ searchText });\r\n    let stationsCodes = this.state.newStationsCodes;\r\n\r\n    if (searchText.length) {\r\n      for (let i = 0; i < stationsCodes.length; i++) {\r\n        let match = stationsCodes[i].station.includes(searchText);\r\n        if (match) {\r\n          stations.push(stationsCodes[i]);\r\n          this.setState({ stations });\r\n        }\r\n      }\r\n    } else {\r\n      this.setState({ stations: [] });\r\n    }\r\n  };\r\n\r\n  // Fetch trains information from current station using stationcode\r\n  // Send results on props to app component\r\n  selectStation = async (e) => {\r\n    e.preventDefault();\r\n    if (this.state.searchText !== \"\") {\r\n      let stationCode = this.state.newStationsCodes.find(\r\n        (item) => item.station === this.state.searchText\r\n      );\r\n      if (stationCode) {\r\n        this.setState({ loading: true });\r\n        try {\r\n          let trains = await GetCurrentStation(stationCode.code);\r\n          if (trains.length) {\r\n            this.props.result(\r\n              trains,\r\n              stationCode.code,\r\n              this.state.newStationsCodes\r\n            );\r\n          } else {\r\n            const error = texts[\"empty-trainarray\"];\r\n            this.setState({ error });\r\n            this.props.result([]);\r\n          }\r\n          this.setState({ stations: [], loading: false });\r\n        } catch (error) {\r\n          console.log(error);\r\n          this.setState({ error: error.message, stations: [] });\r\n        }\r\n      }\r\n    }\r\n    this.setState({ loading: false });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form onSubmit={(e) => this.selectStation(e)} className=\"Search\">\r\n        <div className=\"SearchContent\">\r\n          <label className=\"SearchTitle\">{texts[\"search-label-text\"]}</label>\r\n          <input\r\n            onFocus={(e) => e.target.select()}\r\n            type=\"search\"\r\n            list=\"trains\"\r\n            name=\"trains\"\r\n            value={this.state.searchText}\r\n            onChange={(e) => this.handleSearch(e)}\r\n          />\r\n        </div>\r\n        <datalist id=\"trains\">\r\n          {this.state.stations.map((item, index) => (\r\n            <option\r\n              id=\"option\"\r\n              value={item.station}\r\n              key={index}\r\n              className=\"col col-sm-12 col-md-8 p-2 m-0\"\r\n            ></option>\r\n          ))}\r\n        </datalist>\r\n        {this.state.error ? <p className=\"Error\">{this.state.error}</p> : null}\r\n        {this.state.loading ? <BigLoader /> : null}\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\n\r\nimport { Table } from \"react-bootstrap\";\r\n\r\nconst TabContent = (props) => {\r\n\r\n  const cancelledStyle = (value, index) => {\r\n    let backgroundColor = \"#ffffff\";\r\n\r\n    if ((index & 1) !== 1) {\r\n      backgroundColor = \"#e6e6e6\";\r\n    }\r\n    if (value === true) {\r\n      return {\r\n        color: \"#cccccc\",\r\n        backgroundColor,\r\n      };\r\n    } else {\r\n      return {\r\n        color: \"#262626\",\r\n        backgroundColor,\r\n      };\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"TabContent\">\r\n      <Table borderless responsive>\r\n        <thead>\r\n          <tr>\r\n            <th>{props.titleOne}</th>\r\n            <th>{props.titleTwo}</th>\r\n            <th>{props.titleThree}</th>\r\n            <th>{props.titleFour}</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {props.trains !== null && props.trains !== undefined\r\n            ? props.trains.map(\r\n                (item, index) => (\r\n                  (\r\n                    <tr\r\n                      key={index}\r\n                      style={cancelledStyle(item.cancelled, index)}\r\n                    >\r\n                      <td>{item.trainType + \" \" + item.trainNumber}</td>\r\n                      <td>{item.departureStation}</td>\r\n                      <td>{item.terminal}</td>\r\n                      <td>\r\n                        {item.lateTime !== null ? (\r\n                          <div>\r\n                            <p className=\"LatestTime\">{item.lateTime}</p>\r\n                            <p className=\"ScheduleTime\">\r\n                              {\"(\" + item.scheduledTime + \")\"}\r\n                            </p>\r\n                          </div>\r\n                        ) : (\r\n                          item.scheduledTime\r\n                        )}\r\n                        {item.cancelled ? (\r\n                          <p className=\"Cancelled\">Cancelled</p>\r\n                        ) : null}\r\n                      </td>\r\n                    </tr>\r\n                  )\r\n                )\r\n              )\r\n            : null}\r\n        </tbody>\r\n      </Table>\r\n    </div>\r\n  );\r\n};\r\nexport default TabContent;\r\n","import React from \"react\";\r\n\r\nimport { Tabs, Tab } from \"react-bootstrap\";\r\n\r\nimport TabContent from \"./TabContent\";\r\n\r\nconst Trains = (props) => {\r\n  // convert scheduletimes to better format and create latetime if train is late\r\n  const convertDate = (trains) => {\r\n    let lateTime;\r\n    let newTrains = [];\r\n    for (let i = 0; i < trains.length; i++) {\r\n      let time = new Date(trains[i].scheduledTime);\r\n\r\n      // Convert scheduledTime to Date and get minutes\r\n      let scheduledTimeToMinutes = Math.floor(\r\n        new Date(trains[i].scheduledTime).getTime() / 60000\r\n      );\r\n\r\n      // Convert actualTime to Date and get minutes\r\n      let actualTimeToMinutes = Math.floor(\r\n        new Date(trains[i].actualTime).getTime() / 60000\r\n      );\r\n\r\n      // Made lateTime string\r\n      scheduledTimeToMinutes - actualTimeToMinutes < 0\r\n        ? (lateTime =\r\n            (\"0\" + new Date(trains[i].actualTime).getHours()).slice(-2) +\r\n            \":\" +\r\n            (\"0\" + new Date(trains[i].actualTime).getMinutes()).slice(-2))\r\n        : (lateTime = null);\r\n\r\n      // Made scheduledTime string\r\n      let scheduleTime =\r\n        (\"0\" + new Date(trains[i].scheduledTime).getHours()).slice(-2) +\r\n        \":\" +\r\n        (\"0\" + new Date(trains[i].scheduledTime).getMinutes()).slice(-2);\r\n\r\n      // Replace old scheduledTime from scheduleTime\r\n      trains[i].scheduledTime = scheduleTime;\r\n      let times = { lateTime: lateTime, time: time };\r\n      let newObject = Object.assign({ ...times }, { ...trains[i] });\r\n      newTrains.push(newObject);\r\n    }\r\n    return newTrains;\r\n  };\r\n\r\n  // Check is trains arrival or departure and and create arrival and departure arrays \r\n  const getTrains = (trainType) => {\r\n    let convert;\r\n\r\n    let trains;\r\n    let code;\r\n    let stations;\r\n\r\n    let departureStation;\r\n    let departureStationShortCode;\r\n    let terminal;\r\n    let terminalShortCode;\r\n\r\n    let arrivalTrains = [];\r\n    let departureTrains = [];\r\n\r\n    if (props !== undefined) {\r\n      trains = props.trains;\r\n      code = props.code;\r\n      stations = props.stations;\r\n    } else {\r\n      trains = [];\r\n      code = null;\r\n      stations = null;\r\n    }\r\n\r\n    if (trains.length) {\r\n      for (let i = 0; i < trains.length; i++) {\r\n        for (let j = 0; j < trains[i].timeTableRows.length; j++) {\r\n          if (trains[i].timeTableRows[j].stationShortCode === code) {\r\n            departureStationShortCode =\r\n              trains[i].timeTableRows[0].stationShortCode;\r\n            terminalShortCode =\r\n              trains[i].timeTableRows[trains[i].timeTableRows.length - 1]\r\n                .stationShortCode;\r\n            departureStation = stations.find(\r\n              (item) => item.code === departureStationShortCode\r\n            );\r\n            terminal = stations.find((item) => item.code === terminalShortCode);\r\n\r\n            if (trains[i].timeTableRows[j].type === \"ARRIVAL\") {\r\n              const arrival = {\r\n                trainType: trains[i].trainType,\r\n                trainNumber: trains[i].trainNumber,\r\n                departureStation: departureStation.station,\r\n                terminal: terminal.station,\r\n                cancelled: trains[i].cancelled,\r\n                actualTime: trains[i].timeTableRows[j].actualTime,\r\n                scheduledTime: trains[i].timeTableRows[j].scheduledTime,\r\n              };\r\n              arrivalTrains.push(arrival);\r\n            } else {\r\n              const departure = {\r\n                trainType: trains[i].trainType,\r\n                trainNumber: trains[i].trainNumber,\r\n                departureStation: departureStation.station,\r\n                terminal: terminal.station,\r\n                cancelled: trains[i].cancelled,\r\n                actualTime: trains[i].timeTableRows[j].actualTime,\r\n                scheduledTime: trains[i].timeTableRows[j].scheduledTime,\r\n              };\r\n              departureTrains.push(departure);\r\n            }\r\n          }\r\n        }\r\n      }\r\n      if (trainType === \"ARRIVAL\") {\r\n        convert = convertDate(arrivalTrains);\r\n        convert.sort((a, b) => a.time - b.time);\r\n        return convert;\r\n      } else {\r\n        convert = convertDate(departureTrains);\r\n        convert.sort((a, b) => a.time - b.time);\r\n        return convert;\r\n      }\r\n    }\r\n  };\r\n\r\n  // Get arrivaltrains from trainss\r\n  return (\r\n    <div>\r\n      <Tabs id=\"controlled-tab\">\r\n        <Tab eventKey=\"arrival\" title=\"Arrival\">\r\n          <TabContent\r\n            titleOne=\"Train\"\r\n            titleTwo=\"Departure station\"\r\n            titleThree=\"Terminal\"\r\n            titleFour=\"arrives\"\r\n            trains={getTrains(\"ARRIVAL\")}\r\n          />\r\n        </Tab>\r\n        <Tab eventKey=\"departure\" title=\"departure\">\r\n          <TabContent\r\n            titleOne=\"Train\"\r\n            titleTwo=\"Departure station\"\r\n            titleThree=\"Terminal\"\r\n            titleFour=\"Goes\"\r\n            trains={getTrains(\"DEPARTURE\")}\r\n          />\r\n        </Tab>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Trains;\r\n","import React from \"react\";\r\nimport { Component } from \"react\";\r\nimport \"./App.css\";\r\n\r\nimport { Header } from \"./components/Header\";\r\nimport Search from \"./components/Search\";\r\nimport Trains from \"./components/Trains\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    trains: [],\r\n    code: \"\",\r\n    stations: [],\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"col col-sm-12 col-md-6 p-0 App\">\r\n        <div className=\"Container\">\r\n          <Header />\r\n          <Search\r\n            result={(trains, code, stations) =>\r\n              this.setState({ trains, code, stations })\r\n            }\r\n          />\r\n          <Trains\r\n            trains={this.state.trains}\r\n            code={this.state.code}\r\n            stations={this.state.stations}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}