{"version":3,"sources":["components/Header.js","api/index.js","components/Search.js","components/TabContent.js","components/Results.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","GetStationCodes","_GetStationCodes","apply","this","arguments","_callee","stations","regenerator_default","wrap","_context","prev","next","fetch","then","response","json","data","map","item","push","station","stationName","code","stationShortCode","abrupt","t0","console","log","stop","GetCurrentStation","_x","_GetCurrentStation","_callee2","trains","url","_context2","concat","Search","state","searchText","stationsCodes","handleSearch","e","i","target","value","charAt","toUpperCase","slice","_this","setState","length","includes","selectStation","sent","props","result","_this2","Form","Group","Label","Control","onFocus","select","list","size","type","onChange","ListGroup","index","Item","key","onClick","Component","TabContent","cancelledStyle","color","Table","borderless","responsive","titleOne","titleTwo","titleThree","titleFour","style","cancelled","trainType","trainNumber","departureStation","terminal","lateTime","time","getHours","getMinutes","Results","arrival","departure","train","arrives","goes","getArrivalTrains","j","timeTableRows","scheduledTime","actualTime","scheduledTimeToDate","Date","actualTimeToDate","scheduledGetTime","getTime","actualGetTime","Math","floor","k","sort","b","getDepartureTrains","currentDateGetTime","now","scheduledGetTimeToMinutes","actualGetTimeToMinutes","Tabs","id","defaultActiveKey","onSelect","Tab","eventKey","title","components_TabContent","App","components_Header","components_Search","components_Results","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.47145a0f.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Header = () => (\r\n    <p className=\"Header\">Aseman junatiedot</p>\r\n)\r\n\r\nexport default Header;","export async function GetStationCodes() {\r\n    let stations = [];\r\n\r\n    try {\r\n        const url = \"https://rata.digitraffic.fi/api/v1/metadata/stations\";\r\n        await fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => data.map(item => stations.push(\r\n            {\r\n                station: item.stationName,\r\n                code: item.stationShortCode\r\n            }\r\n        )));\r\n        return stations;\r\n    }catch (error) {\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nexport async function GetCurrentStation(code) {\r\n    let trains = [];\r\n    try {\r\n        let url = `https://rata.digitraffic.fi/api/v1/live-trains/station/${code}?minutes_before_departure=30&minutes_after_departure=15&minutes_before_arrival=30&minutes_after_arrival=15`;\r\n        await fetch(url)\r\n        .then(response => response.json())\r\n        .then(data => data.map(item => trains.push(item)));\r\n        return trains;\r\n    }catch (error) {\r\n        console.log(error);\r\n    }\r\n}","import React from 'react'\r\nimport { Component } from 'react'\r\n\r\nimport { GetStationCodes, GetCurrentStation } from '../api/index'\r\n\r\nimport { Form, ListGroup } from 'react-bootstrap'\r\n\r\nclass Search extends Component {\r\n\r\n    state = {\r\n        searchText: '',\r\n        stations: [],\r\n        stationsCodes: []\r\n    }\r\n\r\n    // Fetch all stationscodes from API\r\n    async componentDidMount() {\r\n        let stationsCodes = await GetStationCodes();\r\n        this.setState({ stationsCodes });\r\n    }\r\n\r\n    // Get value from input, change first letter to upperCase and check if input value match with stations\r\n    // Set all match to stations array\r\n    handleSearch = async (e) => {\r\n        let stations = [];\r\n        let searchText = (e.target.value).charAt(0).toUpperCase() + (e.target.value).slice(1);\r\n        this.setState({ searchText });\r\n\r\n        let stationsCodes = this.state.stationsCodes;\r\n\r\n        if (searchText.length > 0) {\r\n            for (let i = 0; i < stationsCodes.length; i++) {\r\n                let match = stationsCodes[i].station.includes(searchText);\r\n                if (match) {\r\n                    stations.push(stationsCodes[i]);\r\n                    this.setState({ stations });\r\n                }\r\n            }\r\n        } else {\r\n            this.setState({ stations: [] });\r\n        }\r\n    }\r\n\r\n    // Fetch trains information in current station using stationcode\r\n    // Send results on props to app component\r\n    selectStation = async (code, station) => {\r\n        let trains = [];\r\n        this.setState({ searchText: station });\r\n        trains = await GetCurrentStation(code);\r\n        await this.props.result(trains, code, this.state.stationsCodes);\r\n        this.setState({ stations: [] });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Search\">\r\n                <Form>\r\n                    <Form.Group className=\"col col-sm-12 col-md-8 p-0 m-0\">\r\n                        <Form.Label className=\"SearchTitle\">Hae aseman nimellä</Form.Label>\r\n                        <Form.Control onFocus={(e) => e.target.select()} list=\"stations\" size=\"sm\" type=\"search\" value={this.state.searchText} onChange={(e) => this.handleSearch(e)} />\r\n                    </Form.Group>\r\n                    <ListGroup>\r\n                        {this.state.stations.map((item, index) =>\r\n                            <ListGroup.Item key={index} className=\"col col-sm-12 col-md-8 p-2 m-0\" onClick={() => this.selectStation(item.code, item.station)}>{item.station}</ListGroup.Item>\r\n                        )}\r\n                    </ListGroup>\r\n                </Form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search;","import React from 'react'\r\nimport { Component } from 'react'\r\n\r\nimport { Table } from 'react-bootstrap';\r\n\r\nclass TabContent extends Component {\r\n\r\n    cancelledStyle = (value) => {\r\n        if(value === true){\r\n            return {\r\n                color: '#b3b3b3'\r\n            }\r\n        }else{\r\n            return {\r\n                color: '#262626'\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"TabContent\">\r\n                <Table borderless responsive>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>{this.props.titleOne}</th>\r\n                            <th>{this.props.titleTwo}</th>\r\n                            <th>{this.props.titleThree}</th>\r\n                            <th>{this.props.titleFour}</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            this.props.result.length > 0 ?\r\n                                this.props.result.map((item, index) => (\r\n                                    <tr key={index} style={this.cancelledStyle(item.cancelled)}>\r\n                                        <td>{item.trainType + ' ' + item.trainNumber}</td>\r\n                                        <td>{item.departureStation}</td>\r\n                                        <td>{item.terminal}</td>\r\n                                        <td>{item.lateTime !== null ? \r\n                                            <div>\r\n                                                <p className=\"LatestTime\">{item.lateTime}</p>\r\n                                                <p className=\"ScheduleTime\">{'(' + ('0' + item.time.getHours()).slice(-2) + ':' + ('0' + item.time.getMinutes()).slice(-2) + ')'}</p>\r\n                                            </div>  \r\n                                            : ('0' + item.time.getHours()).slice(-2) + ':' + ('0' + item.time.getMinutes()).slice(-2)}{item.cancelled ? \r\n                                            <p className=\"Cancelled\">Cancelled</p>\r\n                                            :null}\r\n                                        </td>\r\n                                    </tr>\r\n                                )) \r\n                            : null\r\n                        }\r\n                    </tbody>\r\n                </Table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TabContent;","import React from 'react'\r\nimport { Component } from 'react'\r\n\r\nimport { Tabs, Tab } from 'react-bootstrap';\r\n\r\nimport TabContent from './TabContent';\r\n\r\nclass Results extends Component {\r\n\r\n    state = {\r\n        key: 'arrival',\r\n        arrival: 'Saapuvat',\r\n        departure: 'Lähtevät',\r\n        train: 'Juna',\r\n        departureStation: 'Lähtöasema',\r\n        terminal: 'Pääteasema',\r\n        arrives: 'Saapuu',\r\n        goes: 'Lähtee'\r\n    }\r\n\r\n    // Get arrivaltrains from results\r\n    getArrivalTrains = () => {\r\n        let result = this.props.result;\r\n        let trains = [];\r\n        let code = this.props.code;\r\n        let stations = this.props.stations;\r\n        let departureStation;\r\n        let terminal;\r\n        let lateTime;\r\n        let time;\r\n\r\n        if (result.length > 0) {\r\n            for (let i = 0; i < result.length; i++) {\r\n                for (let j = 0; j < result[i].timeTableRows.length; j++) {\r\n                    // If stationShortCode and type match, change datestrings to datetime, take getTime, change to minutes and \r\n                    // calculate difference between scheduledTime and actualTime\r\n                    if (result[i].timeTableRows[j].stationShortCode === code) {\r\n                        if (result[i].timeTableRows[j].type === 'ARRIVAL') {\r\n                            let scheduledTime = result[i].timeTableRows[j].scheduledTime;\r\n                            let actualTime = result[i].timeTableRows[j].actualTime;\r\n                            let scheduledTimeToDate = new Date(scheduledTime);\r\n                            let actualTimeToDate = new Date(actualTime);\r\n                            let scheduledGetTime = scheduledTimeToDate.getTime();\r\n                            let actualGetTime = actualTimeToDate.getTime();\r\n                            let scheduledGetTimeToMinutes = Math.floor(scheduledGetTime / 60000);\r\n                            let actualGetTimeToMinutes = Math.floor(actualGetTime / 60000);\r\n                            time = scheduledTimeToDate;\r\n\r\n                            if (scheduledGetTimeToMinutes - actualGetTimeToMinutes < 0) {\r\n                                lateTime = ('0' + actualTimeToDate.getHours()).slice(-2) + ':' + ('0' + actualTimeToDate.getMinutes()).slice(-2)\r\n                            } else {\r\n                                lateTime = null\r\n                            }\r\n\r\n                            // Get current stations name using stationShortCode\r\n                            for (let k = 0; k < stations.length; k++) {\r\n                                if (result[i].timeTableRows[0].stationShortCode === stations[k].code) {\r\n                                    departureStation = stations[k].station\r\n                                }\r\n                                if (result[i].timeTableRows[result[i].timeTableRows.length - 1].stationShortCode === stations[k].code) {\r\n                                    terminal = stations[k].station\r\n                                }\r\n                            }\r\n\r\n                            trains.push({\r\n                                trainType: result[i].trainType,\r\n                                trainNumber: result[i].trainNumber,\r\n                                departureStation: departureStation,\r\n                                terminal: terminal,\r\n                                cancelled: result[i].cancelled,\r\n                                time: time,\r\n                                lateTime: lateTime\r\n                            })\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            trains.sort((a, b) => (a.time - b.time));\r\n            return trains;\r\n        }\r\n        return trains;\r\n    }\r\n\r\n    // Get departureTrains from results\r\n    getDepartureTrains = () => {\r\n        let result = this.props.result;\r\n        let trains = [];\r\n        let code = this.props.code;\r\n        let stations = this.props.stations;\r\n        let departureStation;\r\n        let terminal;\r\n        let lateTime;\r\n        let time;\r\n\r\n        if (result.length > 0) {\r\n            for (let i = 0; i < result.length; i++) {\r\n                for (let j = 0; j < result[i].timeTableRows.length; j++) {\r\n                    // If stationShortCode and type match, change datestrings to datetime, take getTime, change to minutes and \r\n                    // calculate difference between scheduledTime and actualTime\r\n                    if (result[i].timeTableRows[j].stationShortCode === code) {\r\n                        if (result[i].timeTableRows[j].type === 'DEPARTURE') {\r\n                            let scheduledTime = result[i].timeTableRows[j].scheduledTime;\r\n                            let actualTime = result[i].timeTableRows[j].actualTime;\r\n                            let scheduledTimeToDate = new Date(scheduledTime);\r\n                            let actualTimeToDate = new Date(actualTime);\r\n                            let currentDate = new Date(Date.now());\r\n                            let currentDateGetTime = currentDate.getTime();\r\n                            let scheduledGetTime = scheduledTimeToDate.getTime();\r\n                            let actualGetTime = actualTimeToDate.getTime();\r\n                            let scheduledGetTimeToMinutes = Math.floor(scheduledGetTime / 60000);\r\n                            let actualGetTimeToMinutes = Math.floor(actualGetTime / 60000);\r\n                            time = scheduledTimeToDate;\r\n\r\n                            // If currentDateTime is after than scheduledTime, train will drop off from results\r\n                            if ((currentDateGetTime - scheduledGetTime) < 0) {\r\n                                if (scheduledGetTimeToMinutes - actualGetTimeToMinutes < 0) {\r\n                                    lateTime = ('0' + actualTimeToDate.getHours()).slice(-2) + ':' + ('0' + actualTimeToDate.getMinutes()).slice(-2)\r\n                                } else {\r\n                                    lateTime = null\r\n                                }\r\n\r\n                                // Get current stations name using stationShortCode\r\n                                for (let k = 0; k < stations.length; k++) {\r\n                                    if (result[i].timeTableRows[0].stationShortCode === stations[k].code) {\r\n                                        departureStation = stations[k].station\r\n                                    }\r\n                                    if (result[i].timeTableRows[result[i].timeTableRows.length - 1].stationShortCode === stations[k].code) {\r\n                                        terminal = stations[k].station\r\n                                    }\r\n                                }\r\n\r\n                                trains.push({\r\n                                    trainType: result[i].trainType,\r\n                                    trainNumber: result[i].trainNumber,\r\n                                    departureStation: departureStation,\r\n                                    terminal: terminal,\r\n                                    cancelled: result[i].cancelled,\r\n                                    time: time,\r\n                                    lateTime: lateTime\r\n                                })\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                trains.sort((a, b) => (a.time - b.time));\r\n            }\r\n            return trains;\r\n        }\r\n        return trains;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"Results\">\r\n                <Tabs\r\n                    id=\"controlled-tab\"\r\n                    defaultActiveKey={this.state.key}\r\n                    onSelect={key => this.setState({ key })}\r\n                >\r\n                    <Tab eventKey=\"arrival\" title={this.state.arrival}>\r\n                        <TabContent\r\n                            titleOne={this.state.train}\r\n                            titleTwo={this.state.departureStation}\r\n                            titleThree={this.state.terminal}\r\n                            titleFour={this.state.arrives}\r\n                            result={this.getArrivalTrains()}\r\n                        />\r\n                    </Tab>\r\n                    <Tab eventKey=\"departure\" title={this.state.departure}>\r\n                        <TabContent\r\n                            titleOne={this.state.train}\r\n                            titleTwo={this.state.departureStation}\r\n                            titleThree={this.state.terminal}\r\n                            titleFour={this.state.goes}\r\n                            result={this.getDepartureTrains()}\r\n                        />\r\n                    </Tab>\r\n                </Tabs>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Results;","import React from 'react';\nimport { Component } from 'react';\nimport './App.css';\n\nimport Header from './components/Header';\nimport Search from './components/Search';\nimport Results from './components/Results';\n\nclass App extends Component {\n\n  state = {\n    trains: [],\n    code: '',\n    stations: []\n  }\n\n  render() {\n    return (\n      <div className=\"col col-sm-12 col-md-6 p-0 App\">\n        <div className=\"Container\">\n          <Header />\n          <Search result={(trains, code, stations) => this.setState({trains, code, stations})} />\n          <Results result={this.state.trains} code={this.state.code} stations={this.state.stations}/>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}